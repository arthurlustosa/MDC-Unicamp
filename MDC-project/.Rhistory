coord_flip()
View(book_words)
#ordena os termos por maior tf_idf
book_words<-book_words[order(book_words$tf_idf, decreasing = TRUE),]
# calcula e vincula as colunas tf, idf e tf_idf
# no dataframe
book_words <- bind_tf_idf(book_words, word, book, n)
#ordena os termos por maior tf_idf
book_words<-book_words[order(book_words$tf_idf, decreasing = TRUE),]
book_words
# visualização dos 5 termos com maior tf_idf por livro
book_words %>%
arrange(desc(book_words$tf_idf)) %>%
mutate(word = factor(word, levels = rev(unique(word)))) %>%
group_by(book) %>% top_n(5) %>%
ungroup() %>%
ggplot(aes(word, tf_idf, fill = book)) +
geom_col(show.legend = FALSE) +
labs(x = NULL, y = "tf-idf") +
facet_wrap(~book, ncol = 2, scales = "free") +
coord_flip()
library(tm)
library(proxy)
library(ecodist)
# vetores dos termos Jealous e Gossip (consultas)
jealous <- c(0, 1)
library(tm)
library(proxy)
library(ecodist)
# vetores dos termos Jealous e Gossip (consultas)
jealous <- c(0, 1)
gossip <- c(1, 0)
# definindo vetores dos livros
# de acordo com os termos Jealous e Gossip
SaS <- c(2, 10)
PaP <- c(0, 7)
WH <- c(6, 11)
# criando uma matriz com os vetores anteriores
matriz_vetores <- rbind(jealous, gossip, SaS, PaP, WH)
matriz_vetores
############################################
#             PROCESSANDO O TEXTO          #
############################################
# Referência: https://cran.r-project.org/web/packages/corpus/vignettes/corpus.html
processamento_do_texto <- function(arquivo) {
# Carregando o texto do livro
lines <- readLines("oz.txt", encoding = "UTF-8")
# Determinando o inicio efetivo do livro
half_title <- grep("^THE WONDERFUL WIZARD OF OZ", lines)
# Determinando inicio dos capitulos que comecam depois de um numero
chapter <- grep("^[[:space:]]*[[:digit:]]+\\.", lines)
chapter <- chapter[chapter > half_title]
# Obtendo o nome dos capitulos
start <- c(1, chapter + 1) # + 1 para pular o titulo
end <- c(chapter - 1, length(lines))
text <- mapply(function(s, e) paste(lines[s:e], collapse = "\n"), start, end)
# Removendo espacos brancos em sequencia
text <- trimws(text)
# Descartando paginas iniciais
text <- text[-1]
# Obtendo os titulos dos capitulos e removendo as numeracoes ("1.", "2.", etc.)
title <- sub("^[[:space:]]*[[:digit:]]+[.][[:space:]]*", "", lines[chapter])
# Removendo espacos brancos em sequencia
title <- trimws(title)
# Vinculando titulo do capitulo com texto do capitulo
data <- corpus_frame(title, text)
# Incluindo o nome da linha com numeracao do capitulo
rownames(data) <- sprintf("ch%02d", seq_along(chapter))
return (data)
}
scores_termo_consulta <- function(estatistica_docs, termo_query, stat) {
term_values <- estatistica_docs[estatistica_docs$term == termo_query,]
term_values <- term_values[,c("doc_id", stat)]
names(term_values)[names(term_values) == stat] <- paste(stat,termo_query, sep="-")
print(head(term_values))
return(term_values)
}
get_query_statistics <- function(stat_name, chapter_words_stats, tokens_query) {
stats <- scores_termo_consulta(chapter_words_stats, tokens_query[[1]][1], stat_name)
for (i in c(2:length(tokens_query))) {
t <- tokens_query[[1]][i]
aux <- scores_termo_consulta(chapter_words_stats, t, "bm25")
stats <- left_join(stats, aux)
}
stats
stats[is.na(stats)] <- 0
return(stats)
}
library(corpus)
library(dplyr)
library(udpipe)
library(tidytext)
source("ranking_metrics.R")
source("auxiliar_tarefa_aula2.R")
source("../MDC-project/ranking_metrics.R")
source("../0611_Recuperacao_da_Informacao/Material para a Aula 2-20200229/auxiliar_tarefa_aula2.R")
source("../0611_Recuperacao_da_Informacao/Material para a Aula 2-20200229/aula2-atividade_pratica-auxiliar.R")
############################################
#             PROCESSANDO O TEXTO          #
############################################
data <- processamento_do_texto("oz.txt")
############################################
#             PROCESSANDO O TEXTO          #
############################################
data <- processamento_do_texto("../0611_Recuperacao_da_Informacao/Material para a Aula 2-20200229/oz.txt")
############################################
#             PROCESSANDO O TEXTO          #
############################################
data <- processamento_do_texto("../0611_Recuperacao_da_Informacao/Material para a Aula 2-20200229/oz.txt")
############################################
#             PROCESSANDO O TEXTO          #
############################################
data <- processamento_do_texto("../0611_Recuperacao_da_Informacao/Material para a Aula 2-20200229/oz.txt")
C <- c("Xampu", "Sabonete", "Arroz", "Chocolate", "Leite", "Refrigerante", "Queijo", "Suco", "Vinho", "Cerveja")
L <- c("Leite", "Cerveja", "Arroz", "Chocolate")
V <- c("Sabonete", "Detergente", "Refrigerante", "Carne", "Vinho", "Chocolate", "Papel", "Leite", "Iogurte")
## Perguntas:
## Quais os produtos que sao vendidos em Campinas, mas nao sao vendidos em Limeira?
c[1]
## Perguntas:
## Quais os produtos que sao vendidos em Campinas, mas nao sao vendidos em Limeira?
C[1]
## Perguntas:
## Quais os produtos que sao vendidos em Campinas, mas nao sao vendidos em Limeira?
intersect(C, L)
## Perguntas:
## Quais os produtos que sao vendidos em Campinas, mas nao sao vendidos em Limeira?
!intersect(C, L)
## Perguntas:
## Quais os produtos que sao vendidos em Campinas, mas nao sao vendidos em Limeira?
~intersect(C, L)
## Perguntas:
## Quais os produtos que sao vendidos em Campinas, mas nao sao vendidos em Limeira?
intersect(C, L)
## Perguntas:
## Quais os produtos que sao vendidos em Campinas, mas nao sao vendidos em Limeira?
setdiff(C, intersect(C, L))
## Quais os produtos que sao vendidos em Vinhedo, mas nao sao vendidos em Campinas?
setdiff(V, intersect(V, C))
## Quais os produtos que sao vendidos em pelo menos uma cidade?
union(union(V, C), V)
## Quais os produtos que sao vendidos em pelo menos uma cidade?
union(union(C, L), V)
## Quais os produtos que sao vendidos em todas as cidades?
intersect(intersect(C, L), V)
## Se a filial de Limeira parar a distribuicao de produtos, a filial de Campinas
## possui todos os itens necessarios para atender a demanda de Limeira?
intersect(C, L)
ids <- c(172742, 172773, 172825, 172839, 172967, 173149, 173204, 173370, 174096, 174355, 174437, 174487, 174488, 174928, 175380, 175832, 176859, 176914, 176940, 177388, 177554, 177609, 177643, 177825, 177925, 178085, 178137, 178377, 178397, 178525, 178664, 178674, 178740, 178779, 181987, 182039, 182049, 182901, 183024, 183143, 183517, 183984, 184400, 185247, 185820, 186218, 187014, 187217, 188078, 188494, 188548)
p1 <- c(6, 5.1, 7, 3.9, 8.9, 2.6, 0, 0.5, 3.3, 8, 4.8, 4.4, 3.1, 8.3, 1.4, 0.5, 1.1, 5.8, 9.5, 5.1, 4.3, 7.5, 4.8, 1.8, 5.4, 9.5, 4.8, 4.8, 3.3, 8.4, 4.4, 7.8, 8.8, 8.9, 0, 7, 6.9, 5.8, 6.3, 8.8, 6.3, 8.6, 6.1, 5, 3.8, 4.5, 5.4, 8, 1.9, 1.6, 1.6)
p2 <- c(8.6, 8.5, 6.8, 9.1, 5.3, 4.8, 0, 0, 0, 8.9, 6.2, 6.5, 2.9, 6.8, 3.5, 4.8, 6.1, 7.8, 8.9, 8, 5.6, 7.2, 8.9, 0, 7.6, 9.8, 3.3, 8.2, 7.6, 8.8, 0, 9.4, 9.3, 8.1, 0, 8, 9.6, 0, 8.9, 9, 4.5, 5.5, 6.8, 8.6, 0, 9.6, 6.8, 7.8, 5.9, 2.9, 2.3)
p3 <- c(7.6, 7.1, 6.9, 7, 6.7, 3.9, 0, 0.2, 1.3, 8.5, 5.6, 5.6, 3, 7.4, 2.7, 3.1, 4.1, 7, 9.1, 6.9, 5.1, 7.3, 7.2, 0.7, 6.7, 9.6, 3.9, 6.8, 5.9, 8.6, 1.8, 8.7, 9.1, 8.4, 0, 7.6, 8.5, 2.3, 7.8, 8.9, 5.2, 6.8, 6.5, 7.2, 1.5, 7.6, 6.2, 7.9, 4.3, 2.4, 2)
p4 <- c(9.9, 2.3, 10, 7.3, 8.6, 8.9, 0, 9.5, 4.5, 7.9, 8.9, 8.6, 8.2, 6.4, 2.7, 10, 8.6, 8.3, 9.4, 9.5, 8.6, 9.5, 9.1, 0, 10, 7.8, 9.9, 8.2, 6.8, 8.7, 3.2, 6.9, 6.3, 8.9, 3.2, 10, 5.3, 6.4, 7.9, 7.8, 8.2, 8.6, 7.3, 7.5, 5, 8.3, 10, 4.8, 10, 6.4, 7.9)
rowMins <- function(m) {
apply(m, 1, min)
}
rowMins(p1)
p1 <- c(6, 5.1, 7, 3.9, 8.9, 2.6, 0, 0.5, 3.3, 8, 4.8, 4.4, 3.1, 8.3, 1.4, 0.5, 1.1, 5.8, 9.5, 5.1, 4.3, 7.5, 4.8, 1.8, 5.4, 9.5, 4.8, 4.8, 3.3, 8.4, 4.4, 7.8, 8.8, 8.9, 0, 7, 6.9, 5.8, 6.3, 8.8, 6.3, 8.6, 6.1, 5, 3.8, 4.5, 5.4, 8, 1.9, 1.6, 1.6)
rowMins(p1)
#resposta
df = c(ids, p1, p2, p3, p4)
df = as.data.frame(df)
View(df)
#resposta
df = c(ids, p1, p2, p3, p4)
df = as.data.frame(df)
#resposta
df = data.frame(ids, p1, p2, p3, p4)
View(df)
rowMins(df)
#resposta
notas = c(p1, p2, p3)
df = data.frame(ids, notas)
View(df)
#resposta
notas = c(p1, p2, p3)
#resposta
notas = c(p1, p2, p3, p4)
df = data.frame(ids, p1, p2, p3)
df = data.frame(ids, p1, p2, p3, p4)
rowMins <- function(m) {
apply(m, 1, min)
}
rowMins(df)
df[-rowMins(df)]
df[-rowMins(df),]
notas_baixas = rowMins(df)
df[-notas_baixas]
notas_baixas
notas_baixas[1]
df[-c(notas_baixas)]
df[1]
df[1,]
rowMins(df[1,])
rowMins(df[1,])
a = rowMins(df[1,])
rms(df[1,])
rms(1:10)
?rms()
? \rms()
? rms()
?? rms()
df[1]
df[2]
length(df)
length(df[-1])
length(df[-1]-1)
length(df[-1])-1
(sum (df[-1] - mean(df[-1]) )^2
..
(sum (df[-1] - mean(df[-1]) )^2
(sum (df[-1] - mean(df[-1]) ) ^ 2
..
2ˆ2
2^2
rowMins(df[,c(2:4)])
c(2:4)
rowMins(df[,c(2:5)])
df[,c(2:5)]
rowMins(df[,c(2:5)])
media = sqrt(df[2], df[3], df[4], df[5])
(df[2]ˆ2
df[2]^2
sqrt(df[2]^2, df[3]^2, df[4]^2, df[5]^2)
media = sqrt(df[2]^2 + df[3]^2 + df[4]^ + df[5]^2)
sqrt(df[2]^2 + df[3]^2 + df[4]^ + df[5]^2)
n = length(df[-1])-1
media = sqrt(df[2]^2 + df[3]^2 + df[4]^ + df[5]^2)/n
View(media)
qrt(df[3]^2 + df[4]^ + df[5]^2)/n
sqrt(df[3]^2 + df[4]^ + df[5]^2)/n
sqrt((df[3]^2 + df[4]^ + df[5]^2)/n)
media = sqrt((df[3]^2 + df[4]^ + df[5]^2)/n)
media = sqrt((df[2]^2 + df[3]^2 + df[4]^ + df[5]^2)/n)
df[1,]
sort(df[1,])
z <- c(1, 2, 1, 5, 3, 4, 1, 5, 2, 8, 1)
f <- c(3333333333333333)
union(z, f)
C <- c("Xampu", "Sabonete", "Arroz", "Chocolate", "Leite", "Refrigerante", "Queijo", "Suco", "Vinho", "Cerveja")
L <- c("Leite", "Cerveja", "Arroz", "Chocolate")
V <- c("Sabonete", "Detergente", "Refrigerante", "Carne", "Vinho", "Chocolate", "Papel", "Leite", "Iogurte")
C <- c("Xampu", "Sabonete", "Arroz", "Chocolate", "Leite", "Refrigerante", "Queijo", "Suco", "Vinho", "Cerveja")
L <- c("Leite", "Cerveja", "Arroz", "Chocolate")
V <- c("Sabonete", "Detergente", "Refrigerante", "Carne", "Vinho", "Chocolate", "Papel", "Leite", "Iogurte")
2 + 2
sum(3, 4)
## Perguntas:
## Quais os produtos que sao vendidos em Campinas, mas nao sao vendidos em Limeira?
intersect(C, L)
## Perguntas:
## Quais os produtos que sao vendidos em Campinas, mas nao sao vendidos em Limeira?
setdiff(C, intersect(C, L))
## Quais os produtos que sao vendidos em pelo menos uma cidade?
union(union(C, L), V)
## Perguntas:
## Quais os produtos que sao vendidos em Campinas, mas nao sao vendidos em Limeira?
setdiff(C, intersect(C, L))
## Perguntas:
## Quais os produtos que sao vendidos em Campinas, mas nao sao vendidos em Limeira?
setdiff(C, L)
## Quais os produtos que sao vendidos em todas as cidades?
intersect(intersect(C, L), V)
ids <- c(172742, 172773, 172825, 172839, 172967, 173149, 173204, 173370, 174096, 174355, 174437, 174487, 174488, 174928, 175380, 175832, 176859, 176914, 176940, 177388, 177554, 177609, 177643, 177825, 177925, 178085, 178137, 178377, 178397, 178525, 178664, 178674, 178740, 178779, 181987, 182039, 182049, 182901, 183024, 183143, 183517, 183984, 184400, 185247, 185820, 186218, 187014, 187217, 188078, 188494, 188548)
p1 <- c(6, 5.1, 7, 3.9, 8.9, 2.6, 0, 0.5, 3.3, 8, 4.8, 4.4, 3.1, 8.3, 1.4, 0.5, 1.1, 5.8, 9.5, 5.1, 4.3, 7.5, 4.8, 1.8, 5.4, 9.5, 4.8, 4.8, 3.3, 8.4, 4.4, 7.8, 8.8, 8.9, 0, 7, 6.9, 5.8, 6.3, 8.8, 6.3, 8.6, 6.1, 5, 3.8, 4.5, 5.4, 8, 1.9, 1.6, 1.6)
p2 <- c(8.6, 8.5, 6.8, 9.1, 5.3, 4.8, 0, 0, 0, 8.9, 6.2, 6.5, 2.9, 6.8, 3.5, 4.8, 6.1, 7.8, 8.9, 8, 5.6, 7.2, 8.9, 0, 7.6, 9.8, 3.3, 8.2, 7.6, 8.8, 0, 9.4, 9.3, 8.1, 0, 8, 9.6, 0, 8.9, 9, 4.5, 5.5, 6.8, 8.6, 0, 9.6, 6.8, 7.8, 5.9, 2.9, 2.3)
p3 <- c(7.6, 7.1, 6.9, 7, 6.7, 3.9, 0, 0.2, 1.3, 8.5, 5.6, 5.6, 3, 7.4, 2.7, 3.1, 4.1, 7, 9.1, 6.9, 5.1, 7.3, 7.2, 0.7, 6.7, 9.6, 3.9, 6.8, 5.9, 8.6, 1.8, 8.7, 9.1, 8.4, 0, 7.6, 8.5, 2.3, 7.8, 8.9, 5.2, 6.8, 6.5, 7.2, 1.5, 7.6, 6.2, 7.9, 4.3, 2.4, 2)
p4 <- c(9.9, 2.3, 10, 7.3, 8.6, 8.9, 0, 9.5, 4.5, 7.9, 8.9, 8.6, 8.2, 6.4, 2.7, 10, 8.6, 8.3, 9.4, 9.5, 8.6, 9.5, 9.1, 0, 10, 7.8, 9.9, 8.2, 6.8, 8.7, 3.2, 6.9, 6.3, 8.9, 3.2, 10, 5.3, 6.4, 7.9, 7.8, 8.2, 8.6, 7.3, 7.5, 5, 8.3, 10, 4.8, 10, 6.4, 7.9)
rowMins <- function(m) {
apply(m, 1, min)
}
#resposta
df = data.frame(ids, p1, p2, p3, p4)
View(df)
View(df)
2:5
rowMins(df[,c(2:5)])
length(df[-1])
n = length(df)-1
length(df)-1
length(df)
length(df)
length(df[-1])
length(df[-1])-1
df[!rowMins(df)]
rowMins(df)
df[rowMins(df)]
match(df)
match(df$p1)
match(df, 6)
match(df, rowMins(df))
match(df[1], rowMins(df))
names(df)
df == rowMins(df)
!df == rowMins(df)
df == rowMins(df)
!df == rowMins(df)
df[!df == rowMins(df)]
df2 <- df[!df == rowMins(df)]
df[!df == rowMins(df)]
!df == rowMins(df)
df == rowMins(df)
df == rowMins(df[,c(2:5)])
#identifica a menor nota
df2 <- data.frame(df == rowMins(df[,c(2:5)]) )
View(df2)
#identifica a menor nota
df2 <- data.frame(df[df == rowMins(df[,c(2:5)])])
View(df)
#identifica a menor nota
df[df == rowMins(df[,c(2:5)])]
#identifica a menor nota
df == rowMins(df[,c(2:5)])
df2 <- data.frame(df[df == rowMins(df[,c(2:5)]) == F])
#identifica a menor nota
df == rowMins(df[,c(2:5)])
#identifica a menor nota
df[df == rowMins(df[,c(2:5)]) == T]
#identifica a menor nota
df[df == rowMins(df[,c(2:5)]) = T]
#identifica a menor nota
df[df == rowMins(df[,c(2:5)])] == T
df[df == rowMins(df[,c(2:5)])]
df == rowMins(df[,c(2:5)])
#identifica a menor nota
df[df[df == rowMins(df[,c(2:5)])] == T]
#identifica a menor nota
df[df == rowMins(df[,c(2:5)])] == T
#identifica a menor nota
df[df == rowMins(df[,c(2:5)]) == T]
#identifica a menor nota
df[rowMins(df[,c(2:5)]) == T]
#identifica a menor nota
df[df == rowMins(df[,c(2:5)])]
#identifica a menor nota
df[(df == rowMins(df[,c(2:5)])) == T]
#identifica a menor nota
df[(df == rowMins(df[,c(2:5)])) == F]
#identifica a menor nota
df2 <- data.frame(df[(df == rowMins(df[,c(2:5)])) == F])
View(df2)
#identifica a menor nota
df[(df == rowMins(df[,c(2:5)])) == F]
#identifica a menor nota
df[(df == rowMins(df[,c(2:5)])) == T]
#identifica a menor nota
df[(df == rowMins(df[,c(2:5)])) == T] = 0
View(df)
#soma quadratica
sqrt((df[2]^2 + df[3]^2 + df[4]^2 + df[5]^2)/n)
ids <- c(177777)
p1 <- c(8.3)
p2 <- c(9.0)
p3 <- c(5.2)
p4 <- c( 6.7)
rowMins <- function(m) {
apply(m, 1, min)
}
#resposta
df = data.frame(ids, p1, p2, p3, p4)
#identifica a menor nota e atibui 0
df[(df == rowMins(df[,c(2:5)])) == T] = 0
#calculando o valor de n
n = length(df[-1])-1
#soma quadratica
medquad = sqrt((df[2]^2 + df[3]^2 + df[4]^2 + df[5]^2)/n)
View(medquad)
ids <- c(172742, 172773, 172825, 172839, 172967, 173149, 173204, 173370, 174096, 174355, 174437, 174487, 174488, 174928, 175380, 175832, 176859, 176914, 176940, 177388, 177554, 177609, 177643, 177825, 177925, 178085, 178137, 178377, 178397, 178525, 178664, 178674, 178740, 178779, 181987, 182039, 182049, 182901, 183024, 183143, 183517, 183984, 184400, 185247, 185820, 186218, 187014, 187217, 188078, 188494, 188548)
p1 <- c(6, 5.1, 7, 3.9, 8.9, 2.6, 0, 0.5, 3.3, 8, 4.8, 4.4, 3.1, 8.3, 1.4, 0.5, 1.1, 5.8, 9.5, 5.1, 4.3, 7.5, 4.8, 1.8, 5.4, 9.5, 4.8, 4.8, 3.3, 8.4, 4.4, 7.8, 8.8, 8.9, 0, 7, 6.9, 5.8, 6.3, 8.8, 6.3, 8.6, 6.1, 5, 3.8, 4.5, 5.4, 8, 1.9, 1.6, 1.6)
p2 <- c(8.6, 8.5, 6.8, 9.1, 5.3, 4.8, 0, 0, 0, 8.9, 6.2, 6.5, 2.9, 6.8, 3.5, 4.8, 6.1, 7.8, 8.9, 8, 5.6, 7.2, 8.9, 0, 7.6, 9.8, 3.3, 8.2, 7.6, 8.8, 0, 9.4, 9.3, 8.1, 0, 8, 9.6, 0, 8.9, 9, 4.5, 5.5, 6.8, 8.6, 0, 9.6, 6.8, 7.8, 5.9, 2.9, 2.3)
p3 <- c(7.6, 7.1, 6.9, 7, 6.7, 3.9, 0, 0.2, 1.3, 8.5, 5.6, 5.6, 3, 7.4, 2.7, 3.1, 4.1, 7, 9.1, 6.9, 5.1, 7.3, 7.2, 0.7, 6.7, 9.6, 3.9, 6.8, 5.9, 8.6, 1.8, 8.7, 9.1, 8.4, 0, 7.6, 8.5, 2.3, 7.8, 8.9, 5.2, 6.8, 6.5, 7.2, 1.5, 7.6, 6.2, 7.9, 4.3, 2.4, 2)
p4 <- c(9.9, 2.3, 10, 7.3, 8.6, 8.9, 0, 9.5, 4.5, 7.9, 8.9, 8.6, 8.2, 6.4, 2.7, 10, 8.6, 8.3, 9.4, 9.5, 8.6, 9.5, 9.1, 0, 10, 7.8, 9.9, 8.2, 6.8, 8.7, 3.2, 6.9, 6.3, 8.9, 3.2, 10, 5.3, 6.4, 7.9, 7.8, 8.2, 8.6, 7.3, 7.5, 5, 8.3, 10, 4.8, 10, 6.4, 7.9)
format(round(medquad, 2), nsmall = 2)
#resposta
df = data.frame(ids, p1, p2, p3, p4)
#identifica a menor nota e atribui 0
df[(df == rowMins(df[,c(2:5)])) == T] = 0
#calculando o valor de n
n = length(df[-1])-1
#media quadratica
medquad = sqrt((df[2]^2 + df[3]^2 + df[4]^2 + df[5]^2)/n)
format(round(medquad, 2), nsmall = 2)
ids <- c(172742)
p1 <- c(8.3)
p2 <- c( 9.0)
p3 <- c(5.2)
p4 <- c(6.7)
apply(m, 1, min)
rowMins <- function(m) {
apply(m, 1, min)
}
#resposta
df = data.frame(ids, p1, p2, p3, p4)
#identifica a menor nota e atribui 0
df[(df == rowMins(df[,c(2:5)])) == T] = 0
#calculando o valor de n
n = length(df[-1])-1
#media quadratica
medquad = sqrt((df[2]^2 + df[3]^2 + df[4]^2 + df[5]^2)/n)
#formatando medias em 2 casa decimais
medquad = format(round(medquad, 2), nsmall = 2)
View(medquad)
mp1 = mean(p1)
#calculando desvio padrao das notas das provas
dp1 = sd(p1)
sd(p1)
sd(p2)
sd(p4)
ids <- c(172742, 172773, 172825, 172839, 172967, 173149, 173204, 173370, 174096, 174355, 174437, 174487, 174488, 174928, 175380, 175832, 176859, 176914, 176940, 177388, 177554, 177609, 177643, 177825, 177925, 178085, 178137, 178377, 178397, 178525, 178664, 178674, 178740, 178779, 181987, 182039, 182049, 182901, 183024, 183143, 183517, 183984, 184400, 185247, 185820, 186218, 187014, 187217, 188078, 188494, 188548)
p1 <- c(6, 5.1, 7, 3.9, 8.9, 2.6, 0, 0.5, 3.3, 8, 4.8, 4.4, 3.1, 8.3, 1.4, 0.5, 1.1, 5.8, 9.5, 5.1, 4.3, 7.5, 4.8, 1.8, 5.4, 9.5, 4.8, 4.8, 3.3, 8.4, 4.4, 7.8, 8.8, 8.9, 0, 7, 6.9, 5.8, 6.3, 8.8, 6.3, 8.6, 6.1, 5, 3.8, 4.5, 5.4, 8, 1.9, 1.6, 1.6)
p2 <- c(8.6, 8.5, 6.8, 9.1, 5.3, 4.8, 0, 0, 0, 8.9, 6.2, 6.5, 2.9, 6.8, 3.5, 4.8, 6.1, 7.8, 8.9, 8, 5.6, 7.2, 8.9, 0, 7.6, 9.8, 3.3, 8.2, 7.6, 8.8, 0, 9.4, 9.3, 8.1, 0, 8, 9.6, 0, 8.9, 9, 4.5, 5.5, 6.8, 8.6, 0, 9.6, 6.8, 7.8, 5.9, 2.9, 2.3)
p3 <- c(7.6, 7.1, 6.9, 7, 6.7, 3.9, 0, 0.2, 1.3, 8.5, 5.6, 5.6, 3, 7.4, 2.7, 3.1, 4.1, 7, 9.1, 6.9, 5.1, 7.3, 7.2, 0.7, 6.7, 9.6, 3.9, 6.8, 5.9, 8.6, 1.8, 8.7, 9.1, 8.4, 0, 7.6, 8.5, 2.3, 7.8, 8.9, 5.2, 6.8, 6.5, 7.2, 1.5, 7.6, 6.2, 7.9, 4.3, 2.4, 2)
p4 <- c(9.9, 2.3, 10, 7.3, 8.6, 8.9, 0, 9.5, 4.5, 7.9, 8.9, 8.6, 8.2, 6.4, 2.7, 10, 8.6, 8.3, 9.4, 9.5, 8.6, 9.5, 9.1, 0, 10, 7.8, 9.9, 8.2, 6.8, 8.7, 3.2, 6.9, 6.3, 8.9, 3.2, 10, 5.3, 6.4, 7.9, 7.8, 8.2, 8.6, 7.3, 7.5, 5, 8.3, 10, 4.8, 10, 6.4, 7.9)
#calculando desvio padrao das notas das provas
dp1 = sd(p1)
dp2 = sd(p2)
dp3 = sd(p3)
dp4 = sd(p4)
notasrank = sort(df)
View(notasrank)
notasrank = sort(df$ids)
#identifica a menor nota e atribui 0
df[(df == rowMins(df[,c(2:5)])) == T] = 0
notasrank = sort(df)
View(notasrank)
#ranking de alunos
df$Media = medquad
View(df)
#resposta
df = data.frame(ids, p1, p2, p3, p4)
#identifica a menor nota e atribui 0
df[(df == rowMins(df[,c(2:5)])) == T] = 0
#calculando o valor de n
n = length(df[-1])-1
#media quadratica
medquad = sqrt((df[2]^2 + df[3]^2 + df[4]^2 + df[5]^2)/n)
#formatando medias em 2 casa decimais
medquad = format(round(medquad, 2), nsmall = 2)
#calculando media aritmetica das notas das provas
mp1 = mean(p1)
mp2 = mean(p2)
mp3 = mean(p3)
mp4 = mean(p4)
#calculando desvio padrao das notas das provas
dp1 = sd(p1)
dp2 = sd(p2)
dp3 = sd(p3)
dp4 = sd(p4)
#ranking de alunos
df$Media = medquad
View(df)
df[order(df$Media),]
df[order(df$Media,decreasing =T),]
df[sort(df$Media,decreasing =T),]
notasrank = df[order(df$Media,decreasing =T),]
View(notasrank)
ids <- c(172742, 172773, 172825, 172839, 172967, 173149, 173204, 173370, 174096, 174355, 174437, 174487, 174488, 174928, 175380, 175832, 176859, 176914, 176940, 177388, 177554, 177609, 177643, 177825, 177925, 178085, 178137, 178377, 178397, 178525, 178664, 178674, 178740, 178779, 181987, 182039, 182049, 182901, 183024, 183143, 183517, 183984, 184400, 185247, 185820, 186218, 187014, 187217, 188078, 188494, 188548)
p1 <- c(6, 5.1, 7, 3.9, 8.9, 2.6, 0, 0.5, 3.3, 8, 4.8, 4.4, 3.1, 8.3, 1.4, 0.5, 1.1, 5.8, 9.5, 5.1, 4.3, 7.5, 4.8, 1.8, 5.4, 9.5, 4.8, 4.8, 3.3, 8.4, 4.4, 7.8, 8.8, 8.9, 0, 7, 6.9, 5.8, 6.3, 8.8, 6.3, 8.6, 6.1, 5, 3.8, 4.5, 5.4, 8, 1.9, 1.6, 1.6)
p2 <- c(8.6, 8.5, 6.8, 9.1, 5.3, 4.8, 0, 0, 0, 8.9, 6.2, 6.5, 2.9, 6.8, 3.5, 4.8, 6.1, 7.8, 8.9, 8, 5.6, 7.2, 8.9, 0, 7.6, 9.8, 3.3, 8.2, 7.6, 8.8, 0, 9.4, 9.3, 8.1, 0, 8, 9.6, 0, 8.9, 9, 4.5, 5.5, 6.8, 8.6, 0, 9.6, 6.8, 7.8, 5.9, 2.9, 2.3)
p3 <- c(7.6, 7.1, 6.9, 7, 6.7, 3.9, 0, 0.2, 1.3, 8.5, 5.6, 5.6, 3, 7.4, 2.7, 3.1, 4.1, 7, 9.1, 6.9, 5.1, 7.3, 7.2, 0.7, 6.7, 9.6, 3.9, 6.8, 5.9, 8.6, 1.8, 8.7, 9.1, 8.4, 0, 7.6, 8.5, 2.3, 7.8, 8.9, 5.2, 6.8, 6.5, 7.2, 1.5, 7.6, 6.2, 7.9, 4.3, 2.4, 2)
p4 <- c(9.9, 2.3, 10, 7.3, 8.6, 8.9, 0, 9.5, 4.5, 7.9, 8.9, 8.6, 8.2, 6.4, 2.7, 10, 8.6, 8.3, 9.4, 9.5, 8.6, 9.5, 9.1, 0, 10, 7.8, 9.9, 8.2, 6.8, 8.7, 3.2, 6.9, 6.3, 8.9, 3.2, 10, 5.3, 6.4, 7.9, 7.8, 8.2, 8.6, 7.3, 7.5, 5, 8.3, 10, 4.8, 10, 6.4, 7.9)
rowMins <- function(m) {
apply(m, 1, min)
}
#resposta
df = data.frame(ids, p1, p2, p3, p4)
#resposta
df = data.frame(ids, p1, p2, p3, p4)
#calculando o valor de n
n = length(df[-1])-1
#media quadratica
medquad = sqrt(((df[2]^2 + df[3]^2 + df[4]^2 + df[5]^2)-(rowMins(df)^2))/n)
View(medquad)
#formatando medias em 2 casa decimais
medquad = format(round(medquad, 2), nsmall = 2)
#calculando o valor de n
n = length(df[-1])-1; n
# Parte 2
df_chuva <- df_chuva[!duplicated(df_chuva[,c('dia', 'cidade')], fromLast = TRUE), ]
# Parte 3 - variaveis "acumCamp", "acumLim" e "acumVin"
acumCamp <- cumsum(df_chuva[df_chuva$cidade == 'Campinas',]$chuva)
acumLim <- cumsum(df_chuva[df_chuva$cidade == 'Limeira',]$chuva)
# Parte 1 - Criando o DF
df_chuva <- data.frame(dia, cidade, chuva)
# Parte 2
df_chuva <- df_chuva[!duplicated(df_chuva[,c('dia', 'cidade')], fromLast = TRUE), ]
# Parte 1 - Criando o DF
df_chuva <- data.frame(dia, cidade, chuva)
dia <- c(01, 01, 02, 02, 02, 02, 03, 03, 03, 04, 04, 04, 05, 05, 06, 06, 06, 06, 07, 07, 07, 07, 07, 08, 08, 08, 08, 09, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15)
cidade <- c('Campinas', 'Vinhedo', 'Campinas', 'Limeira', 'Campinas', 'Vinhedo', 'Campinas', 'Vinhedo', 'Limeira', 'Campinas', 'Vinhedo', 'Limeira', 'Campinas', 'Vinhedo', 'Campinas', 'Vinhedo', 'Campinas', 'Vinhedo', 'Vinhedo', 'Campinas', 'Vinhedo', 'Vinhedo', 'Limeira', 'Limeira', 'Campinas', 'Vinhedo', 'Limeira', 'Campinas', 'Vinhedo', 'Campinas', 'Limeira', 'Vinhedo', 'Campinas', 'Vinhedo', 'Campinas', 'Limeira', 'Vinhedo', 'Limeira', 'Vinhedo', 'Campinas', 'Limeira', 'Vinhedo', 'Limeira', 'Campinas', 'Limeira', 'Limeira', 'Campinas', 'Campinas', 'Limeira', 'Limeira')
chuva <- c(0.15, 0.02, 0.01, 0.13, 0.12, 2.19, 1.11, 0.76, 2.98, 0.45, 2.63, 0.76, 0.38, 1.26, 2.57, 0.54, 9.87, 3.41, 2.96, 1.37, 6.78, 13.87, 0.11, 1.84, 12.19, 2.86, 11.99, 2.01, 2.32, 11.2, 0.48, 4.33, 13.32, 1.05, 0.56, 1.92, 1.81, 7.66, 2.93, 1.17, 0.7, 2.95, 0.37, 1.08, 1.31, 3.22, 0.49, 1.86, 2.3, 7.65)
# Parte 1 - Criando o DF
df_chuva <- data.frame(dia, cidade, chuva)
# Parte 2
df_chuva <- df_chuva[!duplicated(df_chuva[,c('dia', 'cidade')], fromLast = TRUE), ]
# Parte 3 - variaveis "acumCamp", "acumLim" e "acumVin"
acumCamp <- cumsum(df_chuva[df_chuva$cidade == 'Campinas',]$chuva)
acumLim <- cumsum(df_chuva[df_chuva$cidade == 'Limeira',]$chuva)
acumVin <- cumsum(df_chuva[df_chuva$cidade == 'Vinhedo',]$chuva)
# Parte 4 - "dmaxCamp", "dmaxLim" e "dmaxVin"
# Campinas
df_chuvas_Camp = df_chuva[df_chuva$cidade == 'Campinas',]
dmaxCamp <- df_chuvas_Camp[order(df_chuvas_Camp$chuva, decreasing = T), ][1,]$dia
dmaxCamp
# Limeira
df_chuvas_Lim = df_chuva[df_chuva$cidade == 'Limeira',]
dmaxLim <- df_chuvas_Lim[order(df_chuvas_Lim$chuva, decreasing = T), ][1,]$dia
dmaxLim
# Vinhedo
df_chuvas_Vin = df_chuva[df_chuva$cidade == 'Vinhedo',]
dmaxVin <- df_chuvas_Vin[order(df_chuvas_Vin$chuva, decreasing = T), ][1,]$dia
dmaxVin
